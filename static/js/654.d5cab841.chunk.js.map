{"version":3,"file":"static/js/654.d5cab841.chunk.js","mappings":"iMAAaA,EAAqB,SAAAC,GAChC,OAAOA,EAAMC,SAASA,QACvB,EACYC,EAAwB,SAAAF,GACnC,OAAOA,EAAMC,SAASE,SACvB,EACYC,EAAsB,SAAAJ,GACjC,OAAOA,EAAMC,SAASI,KACvB,E,uCC6ED,EA9EiB,WACd,IAAMC,GAAgBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC5BP,GAAWM,EAAAA,EAAAA,IAAYR,GACvBI,GAAYI,EAAAA,EAAAA,IAAYL,GACxBG,GAAQE,EAAAA,EAAAA,IAAYH,GACpBK,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAU,WACFL,GACLG,GAASG,EAAAA,EAAAA,MACX,GAAE,CAACN,EAAeG,IACnB,IAAMI,EAAeC,MAAMC,QAAQd,IAAaA,EAASe,OAAS,EAelE,OACG,4BAGC,kBAAOC,SAhBO,SAAAC,GACjBA,EAAMC,iBACP,IAAMC,EAAOF,EAAMG,cACbC,EAAOF,EAAKG,SAASC,YAAYC,MACjCC,EAASN,EAAKG,SAASI,cAAcF,MAC3CG,QAAQC,IAAIP,EAAMI,GACjBjB,GAASqB,EAAAA,EAAAA,IAAgB,CAACR,KAAAA,EAAMI,OAAAA,IACjC,EASI,WACC,8BACI,sCACJ,kBACIK,KAAK,OACLC,YAAY,wBACZV,KAAK,cACLW,QAAS,+BACTC,MAAM,yIACNC,UAAQ,QAGZ,8BACE,wCACA,kBACEJ,KAAK,OACLC,YAAa,0BACbV,KAAK,gBACLW,QAAQ,8BACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAASJ,KAAK,SAAd,6BAKI5B,IAAa,sBACbE,IAAS,wDAAgCA,EAAhC,QACV,wBACIQ,GAAgBZ,EAASmC,KAAI,SAAAC,GAC3B,OACG,2BACG,mCAAWA,EAAQf,KAAnB,QACA,oCAAYe,EAAQX,OAApB,QACA,mBAAQK,KAAK,SACb,aAAW,SACnBO,QAAS,kBA9CQC,EA8CkBF,EAAQG,QA7CvD/B,GAASgC,EAAAA,EAAAA,IAAmBF,IADA,IAACA,CA8CR,EAFD,UAIX,yCAPiBF,EAAQG,GAWtB,MA/CT,gBAmDE,C","sources":["redux/Contacts/contactsSelectors.js","pages/Contacts/ContactsPage.jsx"],"sourcesContent":["export const selectUserContacts = state => {\n  return state.contacts.contacts;\n};\nexport const selectContactsLoading = state => {\n  return state.contacts.isLoading;\n};\nexport const selectContactsError = state => {\n  return state.contacts.error;\n};","import React from \"react\";\nimport {selectUserContacts, selectContactsLoading, selectContactsError } from \"../../redux/Contacts/contactsSelectors\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {selectAuthorization} from \"../../redux/selectors\";\nimport { useEffect } from \"react\";\nimport { requestContactsThunk, addContactThunk, deleteContactThunk } from \"../../redux/Contacts/contactsOperations\";\n\nconst Contacts = () => {\n   const authorization = useSelector(selectAuthorization);\n   const contacts = useSelector(selectUserContacts);\n   const isLoading = useSelector(selectContactsLoading);\n   const error = useSelector(selectContactsError);\n   const dispatch = useDispatch();\n   useEffect(() => {\n      if (!authorization) return;\n      dispatch(requestContactsThunk());\n   }, [authorization, dispatch])\n   const showContacts = Array.isArray(contacts) && contacts.length > 0 ;\n   \n   \nconst handleSubmit = event => {\n    event.preventDefault();\n   const form = event.currentTarget; \n   const name = form.elements.contactName.value;\n   const number = form.elements.contactNumber.value;\n   console.log(name, number)\n    dispatch(addContactThunk({name, number }));\n  };\n   const handleDeleteContact = (contactId) => {\n   dispatch(deleteContactThunk(contactId));\n}\n   \n   return (\n      <div> \n\n\n       <form  onSubmit={handleSubmit}>\n        <label>\n            <span>Name: </span>\n        <input\n            type=\"text\"\n            placeholder=\"Enter name of contact\"\n            name=\"contactName\"\n            pattern= \"^[A-Za-z\\u0080-\\uFFFF ']+$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label>\n          <span>Number: </span>\n          <input\n            type=\"text\"\n            placeholder= \"Enter number of contact\"\n            name=\"contactNumber\"\n            pattern=\"^(\\+?[0-9.\\(\\)\\-\\s]*)$\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n         </label>\n        <button  type=\"submit\"> Add contact\n        </button>\n      </form>\n\n         \n           {isLoading && <loader />}\n           {error && <p>Oops, some error occured... {error} </p>}\n           <ul>\n              {showContacts && contacts.map(contact => {\n                 return (\n                    <li key={contact.id}>\n                       <h3>Name: {contact.name} </h3>\n                       <p>Number: {contact.number} </p>\n                       <button type=\"button\"\n                       aria-label=\"delete\"   \n               onClick={() => handleDeleteContact(contact.id)} \n          >\n            <span>Delete</span>\n            </button>\n                    </li>\n                 )\n              } )}\n           </ul>\n       ContactPage \n    </div>       \n      )}\nexport default Contacts;"],"names":["selectUserContacts","state","contacts","selectContactsLoading","isLoading","selectContactsError","error","authorization","useSelector","selectAuthorization","dispatch","useDispatch","useEffect","requestContactsThunk","showContacts","Array","isArray","length","onSubmit","event","preventDefault","form","currentTarget","name","elements","contactName","value","number","contactNumber","console","log","addContactThunk","type","placeholder","pattern","title","required","map","contact","onClick","contactId","id","deleteContactThunk"],"sourceRoot":""}